import { initializeApp } from 'firebase/app';
import { getDatabase, ref, onChildAdded, push, get, onValue } from 'firebase/database';
import wixRealtimeBackend  from 'wix-realtime-backend';

// Firebase configuration
const firebaseConfig = {
  apiKey: "",
  authDomain: "",
  databaseURL: "",
  projectId: "",
  storageBucket: "",
  messagingSenderId: "",
  appId: "",
  measurementId: ""
};

// Initialize Firebase app and database
const app = initializeApp(firebaseConfig);
const database = getDatabase(app);

// Listen for messages continuously (run once in the backend)
function listenForMessages(chatID) {
    const messagesRef = ref(database, `chats/${chatID}/messages`);

    // Listen only for newly added messages
    onChildAdded(messagesRef, (snapshot) => {
        const newMessage = snapshot.val();

        // Define the channel for the specific chat ID
        const channel = { name: `chatMessages_${chatID}` };

        // Publish only the new message
        wixRealtimeBackend.publish(channel, newMessage)
            .then(() => {
                console.log("New message published to channel:", channel.name);
            })
            .catch((error) => {
                console.error("Error publishing new message:", error);
            });
    });
}

// Initialize message listener for a specific chat ID when the backend loads
const chatID = "sampleChatID4"; // Set your specific chat ID or handle dynamically as needed
listenForMessages(chatID);

// Exported functions
export function sendMessage(chatID, senderID, messageText) {
    const messagesRef = ref(database, `chats/${chatID}/messages`);
    const messageData = {
        sender: senderID,
        message: messageText,
        timestamp: Date.now() // Add unique timestamp to each message
    };

    // Push the new message to Firebase
    return push(messagesRef, messageData)
        .then(() => "Message sent successfully!")
        .catch((error) => {
            console.error("Error sending message:", error);
            throw error;
        });
}

export async function getChatMessages(chatID) {
    const messagesRef = ref(database, `chats/${chatID}/messages`);
    const snapshot = await get(messagesRef);

    if (snapshot.exists()) {
        const messages = [];
        snapshot.forEach((childSnapshot) => {
            messages.push(childSnapshot.val());
        });
        return messages;
    } else {
        return [];
    }
}