import { initializeApp } from 'firebase/app';
import { getDatabase, ref, onChildAdded, push, get } from 'firebase/database';
import wixRealtimeBackend from 'wix-realtime-backend';

// Firebase configuration
const firebaseConfig = {
    apiKey: "",
    authDomain: "",
    databaseURL: "",
    projectId: "",
    storageBucket: "",
    messagingSenderId: "",
    appId: "",
    measurementId: ""
};

// Initialize Firebase app and database
const app = initializeApp(firebaseConfig);
const database = getDatabase(app);

// Store active listeners for chatIDs to prevent duplicate listeners
const activeListeners = {};

export function startListeningForMessages(chatID) {
    // Check if a listener is already active for this chatID
    if (activeListeners[chatID]) {
        console.log(`Listener already active for chatID: ${chatID}`);
        return;
    }

    console.log(`Starting listener for chatID: ${chatID}`);
    const messagesRef = ref(database, `chats/${chatID}/messages`);

    // Listen only for newly added messages
    activeListeners[chatID] = onChildAdded(messagesRef, (snapshot) => {
        const newMessage = snapshot.val();

        // Define the channel for the specific chat ID
        const channel = { name: `chatMessages_${chatID}` };

        // Publish only the new message
        wixRealtimeBackend.publish(channel, newMessage)
            .then(() => {
                console.log("New message published to channel:", channel.name);
            })
            .catch((error) => {
                console.error("Error publishing new message:", error);
            });
    });
}

export function stopListeningForMessages(chatID) {
    if (activeListeners[chatID]) {
        activeListeners[chatID]();
        delete activeListeners[chatID];
        console.log(`Stopped listening for chatID: ${chatID}`);
    }
}

// Send message function remains the same
export function sendMessage(chatID, senderID, messageText) {
    const messagesRef = ref(database, `chats/${chatID}/messages`);
    const messageData = {
        sender: senderID,
        message: messageText,
        timestamp: Date.now()
    };

    // Push the new message to Firebase
    return push(messagesRef, messageData)
        .then(() => "Message sent successfully!")
        .catch((error) => {
            console.error("Error sending message:", error);
            throw error;
        });
}

export async function getChatMessages(chatID) {
    const messagesRef = ref(database, `chats/${chatID}/messages`);
    const snapshot = await get(messagesRef);

    if (snapshot.exists()) {
        const messages = [];
        snapshot.forEach((childSnapshot) => {
            messages.push(childSnapshot.val());
        });
        return messages;
    } else {
        return [];
    }
}